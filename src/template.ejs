<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>K6 Load Test: <%= title %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.2/css/all.css" crossorigin="anonymous" />
  <style>
    body, html { margin: 0; padding: 0; font-family: 'Roboto', sans-serif; background: #f4f6fa; color: #222; display: flex; height: 100vh; }
    nav.sidebar { width: 220px; background: #3f51b5; color: white; padding: 24px; box-sizing: border-box; display: flex; flex-direction: column; }
    nav.sidebar ul { list-style: none; padding: 0; margin: 0; }
    nav.sidebar ul li { margin-bottom: 18px; }
    nav.sidebar ul li a { color: white; text-decoration: none; display: flex; align-items: center; gap: 10px; padding: 10px 14px; border-radius: 8px; transition: 0.3s; }
    nav.sidebar ul li a.active, nav.sidebar ul li a:hover { background: rgba(255,255,255,0.15); }
    main.content { flex-grow: 1; padding: 32px 40px; overflow-y: auto; }
    h1 { font-weight: 700; font-size: 2.2rem; margin-bottom: 24px; color: #3f51b5; }
    .summary-row { display: flex; flex-wrap: wrap; gap: 20px; margin-bottom: 40px; }
    .card { background: white; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.12); flex: 1 1 220px; padding: 24px 28px; }
    .card.failed { border-left: 6px solid #f44336; }
    .card h4 { margin: 0 0 14px; font-size: 1.2rem; display: flex; align-items: center; gap: 10px; }
    .card .number { font-size: 2.4rem; font-weight: 700; }
    .tab-content { display: none; background: white; padding: 24px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 14px rgba(0,0,0,0.1); }
    .tab-content.active { display: block; }
    table { width: 100%; border-collapse: collapse; margin-top: 16px; }
    thead th { background: #e0e0e0; padding: 12px 16px; text-align: left; }
    tbody td { padding: 12px 16px; border-bottom: 1px solid #eee; }
    td.failed { color: #f44336; font-weight: 600; }
    td.good { color: #4caf50; font-weight: 600; }
    .chart-container { margin-bottom: 40px; }
    canvas { width: 100% !important; height: 300px !important; }
  </style>
</head>
<body>
  <nav class="sidebar">
    <ul>
      <li><a href="#" class="tab-link active" data-tab="overview"><i class="fas fa-home"></i> Overview</a></li>
      <li><a href="#" class="tab-link" data-tab="metrics"><i class="fas fa-chart-bar"></i> Metrics</a></li>
      <li><a href="#" class="tab-link" data-tab="charts"><i class="fas fa-chart-line"></i> Charts</a></li>
      <li><a href="#" class="tab-link" data-tab="checks"><i class="fas fa-clipboard-check"></i> Checks</a></li>
    </ul>
  </nav>

  <main class="content">
    <h1><i class="fas fa-tachometer-alt"></i> Load Test: <%= title %></h1>

    <section id="overview" class="tab-content active">
      <div class="summary-row">
        <div class="card">
          <h4><i class="fas fa-globe"></i> Total Requests</h4>
          <div class="number"><%= data.metrics.http_reqs?.values.count %></div>
        </div>
        <div class="card failed">
          <h4><i class="fas fa-times-circle"></i> Failed Requests</h4>
          <div class="number"><%= data.metrics.http_req_failed?.values.passes %></div>
        </div>
        <div class="card">
          <h4><i class="fas fa-exclamation-triangle"></i> Breached Thresholds</h4>
          <div class="number"><%= thresholdFailures %></div>
        </div>
        <div class="card">
          <h4><i class="fas fa-eye"></i> Failed Checks</h4>
          <div class="number"><%= checkFailures %></div>
        </div>
      </div>
    </section>

    <section id="metrics" class="tab-content">
      <h2>Request Metrics</h2>
      <table>
        <thead>
          <tr>
            <th>Metric</th><th>Count</th><th>Rate</th><th>Avg</th><th>Max</th>
          </tr>
        </thead>
        <tbody>
          <% for(let metricName of standardMetrics) { if(data.metrics[metricName]) { let metric=data.metrics[metricName] %>
          <tr>
            <td><%= metricName %></td>
            <td><%= metric.values.count || '-' %></td>
            <td><%= metric.values.rate || '-' %></td>
            <td><%= metric.values.avg || '-' %></td>
            <td><%= metric.values.max || '-' %></td>
          </tr>
          <% } } %>
        </tbody>
      </table>
    </section>

    <section id="charts" class="tab-content">
      <h2>Load Test Charts</h2>
      <div class="chart-container"><canvas id="responseTimeChart"></canvas></div>
      <div class="chart-container"><canvas id="throughputChart"></canvas></div>
      <div class="chart-container"><canvas id="errorRateChart"></canvas></div>
    </section>

    <section id="checks" class="tab-content">
      <h2>Checks</h2>
      <table>
        <thead><tr><th>Check</th><th>Passes</th><th>Fails</th></tr></thead>
        <tbody>
          <% for(let check of data.root_group.checks) { %>
          <tr class="<%= check.fails>0 ? 'failed':'' %>">
            <td><%= check.name %></td>
            <td><%= check.passes %></td>
            <td><%= check.fails %></td>
          </tr>
          <% } %>
        </tbody>
      </table>
    </section>
  </main>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // Tabs
    document.querySelectorAll('.tab-link').forEach(link => {
      link.addEventListener('click', e => {
        e.preventDefault();
        document.querySelectorAll('.tab-link').forEach(l => l.classList.remove('active'));
        link.classList.add('active');
        const tab = link.dataset.tab;
        document.querySelectorAll('.tab-content').forEach(c => {
          c.classList.remove('active');
          if (c.id === tab) c.classList.add('active');
        });
      });
    });

    // Example chart data (replace with your K6 metrics)
    const labels = Array.from({length: 20}, (_, i) => `T${i+1}`);
    const responseTimes = labels.map(() => Math.floor(Math.random()*500));
    const throughputs = labels.map(() => Math.floor(Math.random()*200));
    const errorRates = labels.map(() => Math.floor(Math.random()*20));

    function createChart(ctx, type, label, data, color) {
      return new Chart(ctx, {
        type: type,
        data: { labels, datasets: [{ label, data, borderColor: color, backgroundColor: color+'33', fill: true, tension: 0.3 }] },
        options: { responsive: true, plugins: { legend: { display: true } } }
      });
    }

    createChart(document.getElementById('responseTimeChart').getContext('2d'), 'line', 'Response Time (ms)', responseTimes, '#3f51b5');
    createChart(document.getElementById('throughputChart').getContext('2d'), 'bar', 'Throughput (req/sec)', throughputs, '#4caf50');
    createChart(document.getElementById('errorRateChart').getContext('2d'), 'line', 'Error Rate (%)', errorRates, '#f44336');
  </script>
</body>
</html>
