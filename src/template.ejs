<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>K6 Load Test: <%= title %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.2/css/all.css" crossorigin="anonymous" />
  <style>
    /* Base Reset */
    body, html {
      margin: 0; padding: 0; height: 100%;
      font-family: 'Roboto', sans-serif;
      background: #f5f7fa;
      color: #202124;
      display: flex;
      height: 100vh;
    }
    /* Sidebar */
    nav.sidebar {
      width: 220px;
      background-color: #1a73e8;
      color: white;
      display: flex;
      flex-direction: column;
      padding: 20px;
      box-sizing: border-box;
      box-shadow: 2px 0 8px rgba(26, 115, 232, 0.3);
    }
    nav.sidebar ul {
      list-style: none;
      padding: 0;
      margin: 0;
      flex-grow: 1;
    }
    nav.sidebar ul li {
      margin-bottom: 24px;
    }
    nav.sidebar ul li a {
      color: white;
      text-decoration: none;
      font-weight: 500;
      font-size: 1.1rem;
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 8px 12px;
      border-radius: 4px;
      transition: background-color 0.3s ease, color 0.3s ease;
    }
    nav.sidebar ul li a:hover,
    nav.sidebar ul li a.active {
      background-color: #fbc02d;
      color: #202124;
      box-shadow: 0 2px 6px rgba(251,192,45,0.5);
    }
    /* Main Content */
    main.content {
      flex-grow: 1;
      padding: 32px 40px;
      overflow-y: auto;
      background: white;
      border-radius: 0 24px 24px 0;
      box-shadow: 0 4px 20px rgba(60,64,67,0.1);
    }
    h1 {
      font-weight: 700;
      font-size: 2.5rem;
      margin-bottom: 32px;
      display: flex;
      align-items: center;
      gap: 16px;
      color: #1a73e8;
      user-select: none;
    }
    /* Summary Cards */
    .summary-row {
      display: flex;
      flex-wrap: wrap;
      gap: 28px;
      margin-bottom: 48px;
    }
    .card {
      background: white;
      border-radius: 16px;
      box-shadow: 0 6px 16px rgba(60,64,67,0.12);
      flex: 1 1 240px;
      padding: 28px 32px;
      color: #3c4043;
      position: relative;
      transition: box-shadow 0.3s ease, transform 0.3s ease;
      cursor: default;
    }
    .card:hover {
      box-shadow: 0 12px 28px rgba(60,64,67,0.22);
      transform: translateY(-4px);
    }
    .card.failed {
      border-left: 8px solid #d93025;
    }
    .card h4 {
      margin: 0 0 16px;
      font-weight: 700;
      font-size: 1.4rem;
      display: flex;
      align-items: center;
      gap: 14px;
      color: #202124;
    }
    .card .icon {
      font-size: 2.4rem;
      opacity: 0.75;
      color: #1a73e8;
      min-width: 30px;
      text-align: center;
    }
    .card .number {
      font-size: 3.25rem;
      font-weight: 800;
      text-align: center;
      line-height: 1.1;
      color: #202124;
    }
    /* Tabs Navigation */
    .tabs-nav {
      display: flex;
      border-bottom: 3px solid #e0e0e0;
      margin-bottom: 28px;
      gap: 36px;
      user-select: none;
    }
    .tab-button {
      cursor: pointer;
      padding: 14px 24px;
      font-weight: 600;
      font-size: 1.15rem;
      color: #5f6368;
      border-bottom: 4px solid transparent;
      border-radius: 6px 6px 0 0;
      background: #f9fafb;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .tab-button:hover {
      color: #1a73e8;
      background: #e8f0fe;
    }
    .tab-button.active {
      color: #1a73e8;
      border-color: #1a73e8;
      background: white;
      box-shadow: 0 -3px 6px rgba(26,115,232,0.3);
    }
    /* Tab Content */
    .tab-content {
      display: none;
      background: white;
      padding: 32px 32px 48px 32px;
      border-radius: 0 0 16px 16px;
      box-shadow: 0 6px 16px rgba(60,64,67,0.15);
      color: #3c4043;
      min-height: 450px;
    }
    .tab-content.active {
      display: block;
    }
    /* Tables */
    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 1.05rem;
      color: #3c4043;
      margin-top: 20px;
      font-weight: 400;
      background: white;
      box-shadow: 0 2px 12px rgba(60,64,67,0.08);
      border-radius: 12px;
      overflow: hidden;
    }
    thead th {
      background: #f1f3f4;
      border-bottom: none;
      font-weight: 700;
      text-align: left;
      padding: 16px 20px;
      color: #202124;
      user-select: none;
    }
    tbody td {
      border-bottom: 1px solid #e8eaed;
      padding: 14px 20px;
      transition: background-color 0.25s ease;
    }
    tbody tr:hover {
      background-color: #e8f0fe;
    }
    td.failed {
      color: #d93025;
      font-weight: 600;
    }
    td.good {
      color: #188038;
      font-weight: 600;
    }
    /* Footer */
    footer {
      margin-top: 40px;
      text-align: center;
      font-size: 0.9rem;
      color: #5f6368;
      user-select: none;
      letter-spacing: 0.4px;
      font-weight: 500;
    }
    /* Responsive */
    @media (max-width: 900px) {
      body, html {
        flex-direction: column;
        height: auto;
      }
      nav.sidebar {
        width: 100%;
        flex-direction: row;
        overflow-x: auto;
        padding: 12px 20px;
        box-shadow: none;
        border-radius: 0 0 24px 24px;
      }
      nav.sidebar ul {
        flex-direction: row;
        width: 100%;
        justify-content: space-around;
      }
      nav.sidebar ul li {
        margin-bottom: 0;
      }
      main.content {
        padding: 24px 20px;
        border-radius: 0;
        box-shadow: none;
      }
      .summary-row {
        flex-direction: column;
      }
      .card {
        width: 100%;
      }
      .tabs-nav {
        flex-wrap: wrap;
        gap: 12px;
      }
      .tab-button {
        padding: 12px 18px;
        font-size: 1rem;
        border-radius: 6px;
      }
    }
    /* Chart container */
    .chart-container {
      position: relative;
      height: 300px;
      margin-bottom: 50px;
    }
  </style>
</head>
<body>
  <nav class="sidebar" aria-label="Main navigation">
    <ul>
      <li><a href="#" class="tab-link active" data-tab="overview"><i class="fas fa-home"></i> Overview</a></li>
      <li><a href="#" class="tab-link" data-tab="metrics"><i class="fas fa-chart-bar"></i> Metrics</a></li>
      <li><a href="#" class="tab-link" data-tab="charts"><i class="fas fa-chart-line"></i> Charts</a></li>
      <li><a href="#" class="tab-link" data-tab="checks"><i class="fas fa-clipboard-check"></i> Checks</a></li>
    </ul>
  </nav>

  <main class="content" role="main" tabindex="-1">
    <h1><i class="fas fa-tachometer-alt"></i> Load Test: <%= title %></h1>

    <!-- Overview Section -->
    <section id="overview" class="tab-content active" aria-label="Overview">
      <div class="summary-row">
        <div class="card" role="region" aria-labelledby="total-requests-title" tabindex="0">
          <h4 id="total-requests-title"><i class="fas fa-globe icon" aria-hidden="true"></i> Total Requests</h4>
          <div class="number" aria-live="polite">
            <% if(data.metrics.http_reqs) { %><%= data.metrics.http_reqs.values.count %><% } %>
            <% if(data.metrics.grpc_reqs) { %><br><small>gRPC: <%= data.metrics.grpc_reqs.values.count %></small><% } %>
          </div>
        </div>
        <% if(data.metrics.http_req_failed && data.metrics.http_req_failed.values) { %>
          <div class="card failed" role="region" aria-labelledby="failed-requests-title" tabindex="0">
            <h4 id="failed-requests-title"><i class="fas fa-times-circle icon" aria-hidden="true"></i> Failed Requests</h4>
            <div class="number" aria-live="polite"><%= data.metrics.http_req_failed.values.passes %></div>
          </div>
        <% } %>
        <div class="card <% if(thresholdFailures > 0) { %>failed<% } %>" role="region" aria-labelledby="breached-thresholds-title" tabindex="0">
          <h4 id="breached-thresholds-title"><i class="fas fa-exclamation-triangle icon" aria-hidden="true"></i> Breached Thresholds</h4>
          <div class="number" aria-live="polite"><%= thresholdFailures %></div>
        </div>
        <div class="card <% if(checkFailures > 0) { %>failed<% } %>" role="region" aria-labelledby="failed-checks-title" tabindex="0">
          <h4 id="failed-checks-title"><i class="fas fa-eye icon" aria-hidden="true"></i> Failed Checks</h4>
          <div class="number" aria-live="polite"><%= checkFailures %></div>
        </div>
      </div>
    </section>

    <!-- Metrics Section -->
    <section id="metrics" class="tab-content" aria-label="Metrics table">
      <h2>Request Metrics</h2>
      <table role="table" aria-describedby="metrics-desc" aria-sort="none">
        <caption id="metrics-desc" class="sr-only">Table showing request metrics summary</caption>
        <thead>
          <tr>
            <th scope="col">Metric</th>
            <th scope="col">Count</th>
            <th scope="col">Rate</th>
            <th scope="col">Avg</th>
            <th scope="col">Max</th>
            <th scope="col">Median</th>
            <th scope="col">Min</th>
            <th scope="col">90th %</th>
            <th scope="col">95th %</th>
          </tr>
        </thead>
        <tbody>
          <% function checkFailed(metric, valName) {
            if(!metric.thresholds) return ''
            for(let thres in metric.thresholds) {
              if(thres.includes(valName)) {
                if(!metric.thresholds[thres].ok) return 'failed'
                return 'good'
              }
            }
          }
          for(let metricName of standardMetrics) { 
            if(!data.metrics[metricName]) { continue }
            let metric = data.metrics[metricName] 
          %>
          <tr>
            <td><b><%= metricName %></b></td>
            <td class="<%= checkFailed(metric, 'count') %>"><%= metric.values.count ? metric.values.count.toFixed(2) : '-' %></td>
            <td class="<%= checkFailed(metric, 'rate') %>"><%= metric.values.rate ? metric.values.rate.toFixed(2) : '-' %></td>
            <td class="<%= checkFailed(metric, 'avg') %>"><%= metric.values.avg ? metric.values.avg.toFixed(2) : '-' %></td>
            <td class="<%= checkFailed(metric, 'max') %>"><%= metric.values.max ? metric.values.max.toFixed(2) : '-' %></td>
            <td class="<%= checkFailed(metric, 'med') %>"><%= metric.values.med ? metric.values.med.toFixed(2) : '-' %></td>
            <td class="<%= checkFailed(metric, 'min') %>"><%= metric.values.min ? metric.values.min.toFixed(2) : '-' %></td>
            <td class="<%= checkFailed(metric, 'p(90)') %>"><%= metric.values['p(90)'] ? metric.values['p(90)'].toFixed(2) : '-' %></td>
            <td class="<%= checkFailed(metric, 'p(95)') %>"><%= metric.values['p(95)'] ? metric.values['p(95)'].toFixed(2) : '-' %></td>
          </tr>
          <% } %>
        </tbody>
      </table>
    </section>

    <!-- Charts Section -->
    <section id="charts" class="tab-content" aria-label="Load Test Charts">
      <h2>Load Test Charts</h2>
      
      <div class="chart-container" aria-label="Response Time Over Time chart">
        <canvas id="responseTimeChart" role="img" aria-describedby="responseTimeDesc"></canvas>
        <p id="responseTimeDesc" class="sr-only">Line chart representing response time in milliseconds over time</p>
      </div>

      <div class="chart-container" aria-label="Requests Per Second chart">
        <canvas id="throughputChart" role="img" aria-describedby="throughputDesc"></canvas>
        <p id="throughputDesc" class="sr-only">Bar chart representing requests per second over time</p>
      </div>

      <div class="chart-container" aria-label="Error Rate chart">
        <canvas id="errorRateChart" role="img" aria-describedby="errorRateDesc"></canvas>
        <p id="errorRateDesc" class="sr-only">Doughnut chart showing proportion of successful vs failed requests</p>
      </div>
    </section>

    <!-- Checks Section -->
    <section id="checks" class="tab-content" aria-label="Checks and Groups">
      <h2>Checks & Groups</h2>
      <% for(let group of data.root_group.groups) { %>
        <h3>Group: <%= group.name %></h3>
        <table role="table" aria-describedby="groupChecks-<%= group.name %>">
          <caption id="groupChecks-<%= group.name %>" class="sr-only">Checks in group <%= group.name %></caption>
          <thead>
            <tr>
              <th scope="col">Check Name</th>
              <th scope="col">Passes</th>
              <th scope="col">Failures</th>
            </tr>
          </thead>
          <tbody>
            <% for(let check of group.checks) { %>
            <tr class="<%= check.fails > 0 ? 'failed' : '' %>">
              <td><%= check.name %></td>
              <td><%= check.passes %></td>
              <td><%= check.fails %></td>
            </tr>
            <% } %>
          </tbody>
        </table>
      <% } %>

      <h3>Other Checks</h3>
      <table role="table" aria-describedby="otherChecks-desc">
        <caption id="otherChecks-desc" class="sr-only">Other checks</caption>
        <thead>
          <tr>
            <th scope="col">Check Name</th>
            <th scope="col">Passes</th>
            <th scope="col">Failures</th>
          </tr>
        </thead>
        <tbody>
          <% for(let check of data.root_group.checks) { %>
          <tr class="<%= check.fails > 0 ? 'failed' : '' %>">
            <td><%= check.name %></td>
            <td><%= check.passes %></td>
            <td><%= check.fails %></td>
          </tr>
          <% } %>
        </tbody>
      </table>
    </section>

    <footer>
      K6 Reporter v<%= version %> &nbsp;|&nbsp; Powered by <strong>Ben Coleman</strong>
    </footer>
  </main>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // Tab navigation functionality
    document.querySelectorAll('.tab-link').forEach(link => {
      link.addEventListener('click', e => {
        e.preventDefault();
        document.querySelectorAll('.tab-link').forEach(l => l.classList.remove('active'));
        e.currentTarget.classList.add('active');
        const selectedTab = e.currentTarget.getAttribute('data-tab');
        document.querySelectorAll('.tab-content').forEach(tab => {
          tab.classList.remove('active');
          if(tab.id === selectedTab) tab.classList.add('active');
        });
      });
    });

    // Data extractors for charts
    function getResponseTimeData(data) {
      if (!data.timeline || !data.timeline.timestamps || !data.timeline.http_req_duration) return { labels: [], values: [] };
      return {
        labels: data.timeline.timestamps.map(ts => new Date(ts * 1000).toLocaleTimeString()),
        values: data.timeline.http_req_duration || []
      };
    }
    function getThroughputData(data) {
      if (!data.timeline || !data.timeline.timestamps || !data.timeline.http_reqs) return { labels: [], values: [] };
      return {
        labels: data.timeline.timestamps.map(ts => new Date(ts * 1000).toLocaleTimeString()),
        values: data.timeline.http_reqs || []
      };
    }
    function getErrorRateData(data) {
      let failures = data.metrics.http_req_failed?.values.passes || 0;
      let successes = (data.metrics.http_reqs?.values.count || 0) - failures;
      return {
        labels: ['Success', 'Failed'],
        values: [successes, failures]
      };
    }
    
    // Charts initialization
    (() => {
      const ctx = document.getElementById('responseTimeChart').getContext('2d');
      const { labels, values } = getResponseTimeData(<%- JSON.stringify(data) %>);
      new Chart(ctx, {
        type: 'line',
        data: {
          labels,
          datasets: [{
            label: 'Response Time (ms)',
            data: values,
            borderColor: '#1a73e8',
            backgroundColor: 'rgba(26, 115, 232, 0.2)',
            fill: true,
            tension: 0.3,
            pointRadius: 0
          }]
        },
        options: {
          responsive: true,
          interaction: {mode: 'index', intersect: false},
          plugins: { legend: { display: true } },
          scales: {
            x: { title: { display: true, text: 'Time' } },
            y: { title: { display: true, text: 'Milliseconds' }, beginAtZero: true }
          }
        }
      });
    })();

    (() => {
      const ctx = document.getElementById('throughputChart').getContext('2d');
      const { labels, values } = getThroughputData(<%- JSON.stringify(data) %>);
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels,
          datasets: [{
            label: 'Requests per second',
            data: values,
            backgroundColor: '#fbc02d',
            borderRadius: 6
          }]
        },
        options: {
          responsive: true,
          plugins: { legend: { display: true } },
          scales: {
            x: { title: { display: true, text: 'Time' } },
            y: { title: { display: true, text: 'Requests/s' }, beginAtZero: true }
          }
        }
      });
    })();

    (() => {
      const ctx = document.getElementById('errorRateChart').getContext('2d');
      const { labels, values } = getErrorRateData(<%- JSON.stringify(data) %>);
      new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels,
          datasets: [{
            label: 'Error Rate',
            data: values,
            backgroundColor: ['#1a73e8', '#d93025'],
            hoverOffset: 20
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { position: 'bottom', labels: { font: { size: 14, weight: 'bold' } } }
          }
        }
      });
    })();
  </script>
</body>
</html>
